swagger: "2.0"
info:
  description: "An API to manage user accounts using JWT for authentification and authorisation!"
  version: "1.0.0"
  title: "user account manager"
  contact:
    email: "iando.rafidimalalathevoz@heig-vd.ch"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
tags:
- name: "user"
  description: "Operations about user"
- name: "credential"
  description: "credential inforamtion provided by the user"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user and its isAdmin is enabled."
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json" 
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object based on the User definition"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "user created"
        401:
          description: "Unauthorized: you dont have the ability to create a user"
        405:
          description: "Invalid input"
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      - "credential"
      summary: "User logs into the system"
      description: ""
      operationId: "loginUser"
      consumes:
      - "application/json"      
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "credential"
        description: "user credential to log in the system"
        required: true
        schema:
          $ref: "#/definitions/Credential"      
      responses:
        200:
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Find user account by id"
      description: "Returns a single user"
      operationId: "getUserDetails"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the User to return"
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid user ID supplied"
        404:
          description: "User not found"
    post:
      tags:
      - "user"
      summary: "Updated user password"
      description: "This can only be done by the logged in user. The user can change its password"
      operationId: "updateUser"
      produces:
      - "application/json"  
      parameters:
      - name: "id"
        in: "path"
        description: "The password that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
        201:
          description: "User updated"

securityDefinitions:
  JWT:
    description: "token to manage the security"
    type: "apiKey"
    name: "Authorization"
    in: "header"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "embedded key with email for app purpose"
      email:
        type: "string"
        description: "primary key app requirement"
      firstName:
        type: "string"
      lastName:
        type: "string"
      password:
        type: "string"
        format: "password"
      isAdmin:
        type: "boolean"
        description: "User Status define the ability to manage user account on the database"
    xml:
      name: "User"
  Credential:
    type: "object"
    properties:
      email:
        type: "string"
        description: "one of the embedded key compose the key of the user"
      password:
        type: "string"
        format: "password"
